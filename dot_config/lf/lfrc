# IFG lf stuff

# Options
set shell sh # needs to be posix compliant
set shellopts '-eu' # makes shell commands safer
set preview
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id
set filesep "\n"
set ifs "\n"
set scrolloff 10
# set color256
# dynamic ratios on startup
%{{
  w=$(tput cols)
  if [ $w -le 80 ]; then
    lf -remote "send $id set ratios 1:2"
  else
    lf -remote "send $id set ratios 1:2:3"
  fi
}}
set drawbox
set wrapscroll # make scrolling wrap

# warning about nested instances
&[ $LF_LEVEL -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""

# show current directory in window title (not standard so might not work on someplaces)
cmd on-cd &{{
  # '&' commands run silently in background (which is what we want here),
  # but are not connected to stdout.
  # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
  basename "$(pwd | sed "s|$HOME|~|")" | chtermname
}}
# also run at startup
on-cd

# edit config and reload lf
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}
map C edit-config

# Commands
cmd q :quit
cmd Q :quit

cmd open ${{
  case $(file --mime-type "$(readlink -f $f)" -b) in
  text/troff) man ./ $f ;;
  text/*) $EDITOR $fx ;;
  image/x-xcf) setsid gimp $f >/dev/null 2>&1 & ;;
  image/*) setsid imv $f "$(dirname "$f")" & ;;
  audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
  video/*) setsid mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f -quiet >/dev/null 2>&1 & ;;
  application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
  *)
    for f in $fx; do
      setsid $OPENER $f >/dev/null 2>&1 &
    done
    ;;
  esac
}}

cmd share $curl -F"file=@$fx" https://0x0.st | wl-copy

cmd detox ${{ # detox name (clean file name)
  set -f
  detox -r $fx
}}

cmd rename_bulk ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd delete ${{
  set -f
  printf "%s\n\t" "$fx"
  printf "Delete? [y/N] "
  read ans
  [ $ans = "y" ] && rm -rf $fx
}}

cmd moveto ${{
  set -f
  echo "Move to where?"
  dest="$(find $HOME -type d | fzf)" &&
    eval mv -iv $fx $dest &&
    notify-send "File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
  set -f
  echo "Copy to where?"
  dest="$(find $HOME -type d | fzf)" &&
    eval cp -ivr $fx $dest &&
    notify-send "File(s) copied." "File(s) copies to $dest."
}}

cmd decompress ${{ # inflate archive
  set -f
  aunpack "$1"
}}

cmd tar ${{ # compress using tar gz
  set -f
  mkdir -p "$1"
  cp -r $fx "$1"
  tar czf "$1".tar.gz "$1"
  rm -rf "$1"
}}

cmd zip ${{ # compress using zip
  set -f
  mkdir -p "$1"
  cp -r $fx "$1"
  zip -r "$1".zip "$1"
  rm -rf "$1"
}}

cmd shortcuts ${{
  dir="$(cut -d'	' -f1 ~/.config/directories | fzf)"
  [ -z "$dir" ] && exit

  lf -remote "send $id cd $(grep ${dir} ~/.config/directories | cut -d'	' -f2)"
}}

cmd fzf_jump ${{
  # find . -maxdepth 4 -printf '%P\n'  # this will show hidden files/dirs
  res="$(find * -maxdepth 4 | fzf --reverse --header='Jump to' | sed 's/\\/\\\\/g;s/"/\\"/g')"
  if [ -d "$res" ]; then
    cmd="cd"
  else
    cmd="select"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_files)"
}}

cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

cmd mkdir %IFS=" "; mkdir -- "$*"
cmd touch %IFS=" "; touch -- "$*"

cmd mkdir_sel %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

# Mappings
map <c-z> $ kill -STOP $PPID # put lf into de background

map <enter> shell # use <enter> for shell commands
map <esc> reload
map <c-r> reload
map Q quit
map <c-j> push 10j
map <c-k> push 10k
map g top

map o open $f
map O open $f
map x $$f # execute current file
map X !$f

map a push :mkdir<space>
map A push :mkdir_sel<space>
map <c-a> select-files
map t push :touch<space>
map r rename
map Rf :rename; cmd-end; cmd-delete-home
map Rd detox
map Re :rename; cmd-delete-home
map Rb rename_bulk
map <delete> delete

# Shortcuts and navigation
map , shortcuts
# map <c-f> $lf -remote "send $id select '$(fzf)'"
map <c-f> :fzf_jump
