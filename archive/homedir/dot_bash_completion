#!/usr/bin/env bash
# many things taken from bash-completion

__g_heads() {
  git for-each-ref --format="%(refname:strip=2)" \
    "refs/heads/**" "refs/remotes/**" 2>/dev/null
}

__g_tags() {
  git for-each-ref --format="%(refname:strip=2)" \
    "refs/tags/**" 2>/dev/null
}

is_git_repo() {
  if [ -d .git ]; then
    echo .git
  else
    git rev-parse --git-dir 2>/dev/null
  fi
}

_g_complete_files() {
  # enable default completion behaviour (file name completion)
  compopt -o default
  COMPREPLY=()
}

_g_completions() {
  # don't complete on non git repos
  test -z "$(is_git_repo)" && return

  currentWord="${COMP_WORDS[$COMP_CWORD]}"

  if [ "$COMP_CWORD" -eq 1 ]; then
    # mai options
    COMPREPLY=($(compgen -W "$(g getallalias)" "$currentWord"))
  elif [ "$COMP_CWORD" -eq 2 ]; then
    # sub options
    case ${COMP_WORDS[1]} in
    "br" | "ck" | "ckb")
      # complete branch names
      COMPREPLY=($(compgen -W "$(__g_heads)" -- "$currentWord"))
      ;;
    "pl" | "pul")
      # complete fetch remotes
      COMPREPLY=($(compgen -W "$(git remote 2>/dev/null | awk '($3=="(fetch)") {print $1}')" -- "$currentWord"))
      ;;
    "m" | "merge")
      COMPREPLY=($(compgen -W "$(__g_heads)" -- "$currentWord"))
      ;;
    "p" | "pu" | "psh")
      # complete fetch remotes
      COMPREPLY=($(compgen -W "$(git remote 2>/dev/null | awk '($3=="(push)") {print $1}')" -- "$currentWord"))
      ;;
    "t" | "tag" | "tags")
      # complete tag names
      COMPREPLY=($(compgen -W "$(__g_tags)" -- "$currentWord"))
      ;;
    *)
      _g_complete_files "$currentWord"
      ;;
    esac
  elif [ "$COMP_CWORD" -gt 2 ]; then
    # sub sub options
    case ${COMP_WORDS[1]} in
    "br" | "pl" | "pul" | "p" | "pu" | "psh")
      # complete branch names
      COMPREPLY=($(compgen -W "$(__g_heads)" -- "$currentWord"))
      ;;
    "t" | "tag" | "tags")
      # complete tag names
      COMPREPLY=($(compgen -W "$(__g_tags)" -- "$currentWord"))
      ;;
    *)
      _g_complete_files "$currentWord"
      ;;
    esac
  else
    _g_complete_files "$COMP_CWORD"
  fi
}

complete -F _g_completions g

_ka_completions() {
  currentWord="${COMP_WORDS[$COMP_CWORD]}"
  COMPREPLY=($(compgen -W "$(ps axch -o cmd)" "$currentWord"))
}

complete -F _ka_completions ka
